-- MySQL Script generated by MySQL Workbench
-- Wed Oct 4 10:49:30 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema FabricaAutos
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `FabricaAutos`;

-- -----------------------------------------------------
-- Schema FabricaAutos
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `FabricaAutos` DEFAULT CHARACTER SET utf8 ;
USE `FabricaAutos` ;


-- -----------------------------------------------------
-- Table `FabricaAutos`.`automovil`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `FabricaAutos`.`automovil` (
  `id_automobil` INT not NULL AUTO_INCREMENT,
  `modelo` VARCHAR(45) NOT NULL,
  `fecha_inicio` DATETIME NOT NULL,
  `fecha_finalizacion` DATETIME NOT NULL,
  `precio` FLOAT NOT NULL,
  `patente` VARCHAR(45) NOT NULL,
  `linea_de_montaje_id_linea` INT NOT NULL,
  `estado` INT NOT NULL,
  PRIMARY KEY (`id_automobil`),
  CONSTRAINT `fk_automovil_linea_de_montaje1`
    FOREIGN KEY (`linea_de_montaje_id_linea`)
    REFERENCES `FabricaAutos`.`linea_de_montaje` (`id_linea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_automovil_linea_de_montaje1_idx` ON `FabricaAutos`.`automovil` (`linea_de_montaje_id_linea` ASC) VISIBLE;

-- -----------------------------------------------------
-- Table `FabricaAutos`.`linea_de_montaje`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `FabricaAutos`.`linea_de_montaje` (
  `id_linea` INT NOT NULL AUTO_INCREMENT,
  `modelo` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_linea`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `FabricaAutos`.`estacion_de_trabajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `FabricaAutos`.`estacion_de_trabajo` (
  `id_estacion` INT NOT NULL AUTO_INCREMENT,
  `linea_de_montaje_id_linea` INT NOT NULL,
  `descripcion` VARCHAR(45) NOT NULL,
  `id_automovil` INT ,
  PRIMARY KEY (`id_estacion`),
  CONSTRAINT `fk_estacion_de_trabajo_linea_de_montaje1`
    FOREIGN KEY (`linea_de_montaje_id_linea`)
    REFERENCES `FabricaAutos`.`linea_de_montaje` (`id_linea`),
    CONSTRAINT `fk_automovil_estacion_de_trabajo`
FOREIGN KEY (`id_automovil`)
REFERENCES `FabricaAutos`.`automovil` (`id_automobil`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

CREATE INDEX `fk_estacion_de_trabajo_linea_de_montaje1_idx` ON `FabricaAutos`.`estacion_de_trabajo` (`linea_de_montaje_id_linea` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `FabricaAutos`.`concesionario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `FabricaAutos`.`concesionario` (
  `id_concesionario` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `telefono` VARCHAR(45) NOT NULL,
  `borrable` INT NOT NULL,
  PRIMARY KEY (`id_concesionario`)
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `FabricaAutos`.`pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `FabricaAutos`.`pedido` (
  `id_pedido` INT NOT NULL,
  `cantidad` INT NOT NULL,
  `concesionario_id_concesionario` INT NOT NULL,
  `modelo` VARCHAR(45) NOT NULL,
  `borrable` INT NOT NULL,
  PRIMARY KEY (`id_pedido`),
  CONSTRAINT `fk_pedido_concesionario1`
    FOREIGN KEY (`concesionario_id_concesionario`)
    REFERENCES `FabricaAutos`.`concesionario` (`id_concesionario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

CREATE INDEX `fk_pedido_concesionario1_idx` ON `FabricaAutos`.`pedido` (`concesionario_id_concesionario` ASC) VISIBLE;

-- -----------------------------------------------------
-- Table `FabricaAutos`.`proveedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `FabricaAutos`.`proveedor` (
  `id_proveedor` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `telefono` VARCHAR(45) NOT NULL,
  `borrable` INT NOT NULL,
  PRIMARY KEY (`id_proveedor`)
) ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `FabricaAutos`.`insumo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `FabricaAutos`.`insumo` (
  `insumo_id` INT NOT NULL AUTO_INCREMENT,
  `descripcion_insumo` VARCHAR(45) NULL,
  `precio` FLOAT NOT NULL,
  `proveedor_id_proveedor` INT NOT NULL,
  `borrable` INT NOT NULL,
  PRIMARY KEY (`insumo_id`),
  CONSTRAINT `fk_insumo_proveedor1`
    FOREIGN KEY (`proveedor_id_proveedor`)
    REFERENCES `FabricaAutos`.`proveedor` (`id_proveedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

CREATE INDEX `fk_insumo_proveedor1_idx` ON `FabricaAutos`.`insumo` (`proveedor_id_proveedor` ASC) VISIBLE;

-- -----------------------------------------------------
-- Table `FabricaAutos`.`pedido_has_automovil`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `FabricaAutos`.`pedido_has_automovil` (
  `pedido_id_pedido` INT NOT NULL,
  `automobil_id_automovil` INT NOT NULL,
  PRIMARY KEY (`pedido_id_pedido`, `automobil_id_automovil`),
  CONSTRAINT `fk_pedido_has_automobil_pedido1`
    FOREIGN KEY (`pedido_id_pedido`)
    REFERENCES `FabricaAutos`.`pedido` (`id_pedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_has_automobil_automobil1`
    FOREIGN KEY (`automobil_id_automovil`)
    REFERENCES `FabricaAutos`.`automovil` (`id_automobil`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

CREATE INDEX `fk_pedido_has_automobil_automobil1_idx` ON `FabricaAutos`.`pedido_has_automovil` (`automobil_id_automovil` ASC) VISIBLE;
CREATE INDEX `fk_pedido_has_automobil_pedido1_idx` ON `FabricaAutos`.`pedido_has_automovil` (`pedido_id_pedido` ASC) VISIBLE;

-- -----------------------------------------------------
-- Table `FabricaAutos`.`insumo_has_estacion_de_trabajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `FabricaAutos`.`insumo_has_estacion_de_trabajo` (
  `insumo_insumo_id` INT NOT NULL,
  `estacion_de_trabajo_id_estacion` INT NOT NULL,
  PRIMARY KEY (`insumo_insumo_id`, `estacion_de_trabajo_id_estacion`),
  CONSTRAINT `fk_insumo_has_estacion_de_trabajo_insumo1`
    FOREIGN KEY (`insumo_insumo_id`)
    REFERENCES `FabricaAutos`.`insumo` (`insumo_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_insumo_has_estacion_de_trabajo_estacion_de_trabajo1`
    FOREIGN KEY (`estacion_de_trabajo_id_estacion`)
    REFERENCES `FabricaAutos`.`estacion_de_trabajo` (`id_estacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

CREATE INDEX `fk_insumo_has_estacion_de_trabajo_estacion_de_trabajo1_idx` ON `FabricaAutos`.`insumo_has_estacion_de_trabajo` (`estacion_de_trabajo_id_estacion` ASC) VISIBLE;
CREATE INDEX `fk_insumo_has_estacion_de_trabajo_insumo1_idx` ON `FabricaAutos`.`insumo_has_estacion_de_trabajo` (`insumo_insumo_id` ASC) VISIBLE;


DELIMITER //

CREATE PROCEDURE InsertarPedido(
    IN p_id_pedido INT,
    IN p_cantidad INT,
    IN p_concesionario_id_concesionario INT,
    IN p_borrable INT,
    IN p_modelo varchar(40)
)
BEGIN
    -- Declarar variables
    DECLARE done INT DEFAULT 0;
    DECLARE pedido_id INT;
    DECLARE pedidos_cursor CURSOR FOR SELECT id_pedido FROM pedido;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Abrir el cursor
    OPEN pedidos_cursor;

    -- Verificar si el id_pedido ya existe
    pedidos_loop: LOOP
        FETCH pedidos_cursor INTO pedido_id;
        IF done THEN
            LEAVE pedidos_loop;
        END IF;

        IF pedido_id = p_id_pedido THEN
            CLOSE pedidos_cursor;
            SELECT 'Error: El id_pedido ya existe.';
            LEAVE pedidos_loop;
        END IF;
    END LOOP;

    -- Si no existe, realizar el insert
    IF done = 1 THEN
        INSERT INTO pedido (id_pedido, cantidad, concesionario_id_concesionario,borrable,modelo)
        VALUES (p_id_pedido, p_cantidad, p_concesionario_id_concesionario,p_borrable,p_modelo);
        select pedidoCreaAuto(p_modelo,p_cantidad,p_id_pedido);
        
        SELECT 'Registro insertado correctamente.';
    END IF;

    -- Cerrar el cursor
    CLOSE pedidos_cursor;

END//



CREATE PROCEDURE InsertarProveedor(
    IN p_id_proveedor INT,
    IN p_nombre VARCHAR(45),
    IN p_telefono VARCHAR(45),
    IN p_borrable INT

)
BEGIN
    -- Declarar variables
    DECLARE done INT DEFAULT 0;
    DECLARE proveedor_id INT;
    DECLARE proveedores_cursor CURSOR FOR SELECT id_proveedor FROM proveedor;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Abrir el cursor
    OPEN proveedores_cursor;

    -- Verificar si el id_proveedor ya existe
    proveedores_loop: LOOP
        FETCH proveedores_cursor INTO proveedor_id;
        IF done THEN
            LEAVE proveedores_loop;
        END IF;

        IF proveedor_id = p_id_proveedor THEN
            CLOSE proveedores_cursor;
            SELECT 'Error: El id_proveedor ya existe.';
            LEAVE proveedores_loop;
        END IF;
    END LOOP;

    -- Si no existe, realizar el insert
    IF done = 1 THEN
        INSERT INTO proveedor (id_proveedor, nombre, telefono,borrable)
        VALUES (p_id_proveedor, p_nombre, p_telefono,p_borrable);
        SELECT 'Registro insertado correctamente.';
    END IF;

    -- Cerrar el cursor
    CLOSE proveedores_cursor;

END//
CREATE PROCEDURE InsertarConcesionario(
    IN p_id_concesionario INT,
    IN p_nombre VARCHAR(40),
    IN p_telefono VARCHAR(40),
    in p_borrable int
)
BEGIN
    -- Declarar variables
    DECLARE done INT DEFAULT 0;
    DECLARE concesionario_id INT;
    DECLARE concesionarios_cursor CURSOR FOR SELECT id_concesionario FROM concesionario;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Abrir el cursor
    OPEN concesionarios_cursor;

    -- Verificar si el id_concesionario ya existe
    concesionarios_loop: LOOP
        FETCH concesionarios_cursor INTO concesionario_id;
        IF done THEN
            LEAVE concesionarios_loop;
        END IF;

        IF concesionario_id = p_id_concesionario THEN
            CLOSE concesionarios_cursor;
            SELECT 'Error: El id_concesionario ya existe.';
            LEAVE concesionarios_loop;
        END IF;
    END LOOP;

    -- Si no existe, realizar el insert
    IF done = 1 THEN
        INSERT INTO concesionario (id_concesionario, nombre, telefono,borrable)
        VALUES (p_id_concesionario, p_nombre, p_telefono,p_borrable);
        SELECT 'Registro insertado correctamente.';
    END IF;

    -- Cerrar el cursor
    CLOSE concesionarios_cursor;

END//




CREATE PROCEDURE InsertarInsumo(
    IN p_id_insumo INT,
    IN p_descripcion_insumo VARCHAR(45),
    IN p_precio FLOAT,
    IN p_proveedor_id_proveedor INT,
    IN p_borrable INT,
    IN p_id_pedido INT
    
)
BEGIN
    -- Declarar variables
    DECLARE done INT DEFAULT 0;
    DECLARE insumo_id INT;
    DECLARE insumos_cursor CURSOR FOR SELECT insumo_id FROM insumo;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Abrir el cursor
    OPEN insumos_cursor;

    -- Verificar si el id_insumo ya existe
    insumos_loop: LOOP
        FETCH insumos_cursor INTO insumo_id;
        IF done THEN
            LEAVE insumos_loop;
        END IF;

        IF insumo_id = p_id_insumo THEN
            CLOSE insumos_cursor;
            SELECT 'Error: El id_insumo ya existe.';
            LEAVE insumos_loop;
        END IF;
    END LOOP;

    -- Si no existe, realizar el insert
    IF done = 1 THEN
        INSERT INTO insumo (insumo_id, descripcion_insumo, precio, proveedor_id_proveedor,borrable)
        VALUES (p_id_insumo, p_descripcion_insumo, p_precio, p_proveedor_id_proveedor, p_borrable);
        
        INSERT INTO insumo_has_estacion_de_trabajo (insumo_insumo_id,estacion_de_trabajo_id_estacion)
        VALUES (p_id_insumo,p_id_pedido);
        SELECT 'Registro insertado correctamente.';
    END IF;

    -- Cerrar el cursor
    CLOSE insumos_cursor;

END//


CREATE FUNCTION ModificarConcesionario(
    p_id_concesionario INT,
    p_nombre VARCHAR(40),
    p_telefono VARCHAR(40),
     p_borrable INT
)
RETURNS VARCHAR(100)
deterministic
BEGIN
    DECLARE num_rows INT;

    -- Verificar si el id_concesionario existe
    SELECT COUNT(*) INTO num_rows FROM concesionario WHERE id_concesionario = p_id_concesionario;
    IF num_rows = 0 THEN
        RETURN CONCAT('No se encontró el concesionario con ID ', p_id_concesionario);
    END IF;

    -- Modificar el registro
    UPDATE concesionario
    SET nombre = p_nombre,
        telefono = p_telefono,
        borrable = p_borrable
    WHERE id_concesionario = p_id_concesionario;

    RETURN 'Registro de concesionario modificado correctamente.';
    
END//
CREATE FUNCTION ModificarPedido(
    p_id_pedido INT,
    p_cantidad INT,
    p_concesionario_id_concesionario INT,
    p_borrable INT
)
RETURNS VARCHAR(100)deterministic
BEGIN
    DECLARE num_rows INT;

    -- Verificar si el id_pedido existe
    SELECT COUNT(*) INTO num_rows FROM pedido WHERE id_pedido = p_id_pedido;
    IF num_rows = 0 THEN
        RETURN CONCAT('No se encontró el pedido con ID ', p_id_pedido);
    END IF;

    -- Modificar el registro
    UPDATE pedido
    SET cantidad = p_cantidad,
        concesionario_id_concesionario = p_concesionario_id_concesionario,
        borrable = p_borrable
    WHERE id_pedido = p_id_pedido;

    RETURN 'Registro de pedido modificado correctamente.';
END//
CREATE FUNCTION ModificarProveedor(
    p_id_proveedor INT,
    p_nombre VARCHAR(45),
    p_telefono VARCHAR(45),
	p_borrable INT
)
RETURNS VARCHAR(100)deterministic
BEGIN
    DECLARE num_rows INT;

    -- Verificar si el id_proveedor existe
    SELECT COUNT(*) INTO num_rows FROM proveedor WHERE id_proveedor = p_id_proveedor;
    IF num_rows = 0 THEN
        RETURN CONCAT('No se encontró el proveedor con ID ', p_id_proveedor);
    END IF;

    -- Modificar el registro
    UPDATE proveedor
    SET nombre = p_nombre,
        telefono = p_telefono,
        borrable = p_borrable
    WHERE id_proveedor = p_id_proveedor;

    RETURN 'Registro de proveedor modificado correctamente.';
END//
CREATE FUNCTION ModificarInsumo(
    p_id_insumo INT,
    p_descripcion_insumo VARCHAR(45),
    p_precio FLOAT,
    p_proveedor_id_proveedor INT,
    p_borrable INT
)
RETURNS VARCHAR(100)deterministic
BEGIN
    DECLARE num_rows INT;

    -- Verificar si el id_insumo existe
    SELECT COUNT(*) INTO num_rows FROM insumo WHERE id_insumo = p_id_insumo;
    IF num_rows = 0 THEN
        RETURN CONCAT('No se encontró el insumo con ID ', p_id_insumo);
    END IF;

    -- Modificar el registro
    UPDATE insumo
    SET descripcion_insumo = p_descripcion_insumo,
        precio = p_precio,
        proveedor_id_proveedor = p_proveedor_id_proveedor,
        borrable = p_borrable
    WHERE id_insumo = p_id_insumo;

    RETURN 'Registro de insumo modificado correctamente.';
END//



-------------------------------------------------------------------------------------------------------------------------------------
CREATE FUNCTION BajaConcesionario(
    p_id_concesionario INT
)
RETURNS VARCHAR(100)deterministic
BEGIN
    DECLARE borrable_value INT;
   DECLARE num_rows INT;
    -- Obtener el valor de borrable
    SELECT borrable INTO borrable_value FROM concesionario WHERE id_concesionario = p_id_concesionario;

    IF borrable_value = 0 THEN
        RETURN CONCAT('No se puede borrar el concesionario con ID ', p_id_concesionario, '. No es borrable.');
    END IF;

 

    -- Verificar si el id_concesionario existe
    SELECT COUNT(*) INTO num_rows FROM concesionario WHERE id_concesionario = p_id_concesionario;
    IF num_rows = 0 THEN
        RETURN CONCAT('No se encontró el concesionario con ID ', p_id_concesionario);
    END IF;

    -- Realizar la baja
    DELETE FROM concesionario WHERE id_concesionario = p_id_concesionario;

    RETURN 'Concesionario borrado correctamente.';
END//
CREATE FUNCTION BajaPedido(
    p_id_pedido INT
)
RETURNS VARCHAR(100)deterministic
BEGIN
    DECLARE borrable_value INT;
DECLARE num_rows INT;
    -- Obtener el valor de borrable
    SELECT borrable INTO borrable_value FROM pedido WHERE id_pedido = p_id_pedido;

    IF borrable_value = 0 THEN
        RETURN CONCAT('No se puede borrar el pedido con ID ', p_id_pedido, '. No es borrable.');
    END IF;

    

    -- Verificar si el id_pedido existe
    SELECT COUNT(*) INTO num_rows FROM pedido WHERE id_pedido = p_id_pedido;
    IF num_rows = 0 THEN
        RETURN CONCAT('No se encontró el pedido con ID ', p_id_pedido);
    END IF;

    -- Realizar la baja
    DELETE FROM pedido WHERE id_pedido = p_id_pedido;

    RETURN 'Pedido borrado correctamente.';
END//
CREATE FUNCTION BajaProveedor(
    p_id_proveedor INT
)
RETURNS VARCHAR(100)deterministic
BEGIN
    DECLARE borrable_value INT;
DECLARE num_rows INT;
    -- Obtener el valor de borrable
    SELECT borrable INTO borrable_value FROM proveedor WHERE id_proveedor = p_id_proveedor;

    IF borrable_value = 0 THEN
        RETURN CONCAT('No se puede borrar el proveedor con ID ', p_id_proveedor, '. No es borrable.');
    END IF;

    

    -- Verificar si el id_proveedor existe
    SELECT COUNT(*) INTO num_rows FROM proveedor WHERE id_proveedor = p_id_proveedor;
    IF num_rows = 0 THEN
        RETURN CONCAT('No se encontró el proveedor con ID ', p_id_proveedor);
    END IF;

    -- Realizar la baja
    DELETE FROM proveedor WHERE id_proveedor = p_id_proveedor;

    RETURN 'Proveedor borrado correctamente.';
END//
CREATE FUNCTION BajaInsumo(
    p_id_insumo INT
)
RETURNS VARCHAR(100)deterministic
BEGIN
    DECLARE borrable_value INT;
 DECLARE num_rows INT;
    -- Obtener el valor de borrable
    SELECT borrable INTO borrable_value FROM insumo WHERE id_insumo = p_id_insumo;

    IF borrable_value = 0 THEN
        RETURN CONCAT('No se puede borrar el insumo con ID ', p_id_insumo, '. No es borrable.');
    END IF;

   

    -- Verificar si el id_insumo existe
    SELECT COUNT(*) INTO num_rows FROM insumo WHERE id_insumo = p_id_insumo;
    IF num_rows = 0 THEN
        RETURN CONCAT('No se encontró el insumo con ID ', p_id_insumo);
    END IF;

    -- Realizar la baja
    DELETE FROM insumo WHERE id_insumo = p_id_insumo;
    DELETE FROM insumo_has_estacion_de_trabajo  WHERE insumo_insumo_id = p_id_insumo;

    RETURN 'Insumo borrado correctamente.';
END//

create function pedidoCreaAuto(

p_modelo varchar(45),
p_cantidad int,
p_id_pedido int
)
RETURNS VARCHAR(100)deterministic
begin
DECLARE contador INT DEFAULT 1;
DECLARE patente_generada VARCHAR(10);
DECLARE id_encontrado INT;
DECLARE ultimo_id INT;
DECLARE ultimo_id_automovil INT;

while contador <= p_cantidad do


 SET patente_generada = (
SELECT CONCAT(
    CHAR(65 + FLOOR(RAND() * 26)), 
    CHAR(65 + FLOOR(RAND() * 26)),
    CHAR(65 + FLOOR(RAND() * 26)),
    FLOOR(RAND() * 10), 
    FLOOR(RAND() * 10),
    FLOOR(RAND() * 10)
) AS patente_auto
);     -- genero una patente aleatoria

 SELECT id_linea INTO id_encontrado FROM linea_de_montaje WHERE modelo = p_modelo;
    IF id_encontrado IS NOT NULL THEN
     -- Agrego el auto a una linea ya usada con el mismo modelo
  
  INSERT INTO automovil ( modelo, fecha_finalizacion, precio,patente,linea_de_montaje_id_linea,estado,fecha_inicio)
        VALUES (p_modelo, '2013-11-24 17:15:10', 0,patente_generada,id_encontrado,0, NOW() );
         SET ultimo_id_automovil = LAST_INSERT_ID();
        INSERT INTO pedido_has_automovil (pedido_id_pedido,automobil_id_automovil)
        VALUES ( p_id_pedido, ultimo_id_automovil);
        
        else 
        INSERT INTO linea_de_montaje (modelo) VALUES (p_modelo);
        SET ultimo_id = LAST_INSERT_ID();
          insert into estacion_de_trabajo (linea_de_montaje_id_linea,Descripcion,id_automovil)
          values (ultimo_id,"ensamblado de chapa",null),(ultimo_id,"mecánica motor",null), (ultimo_id,"mecánica rodaje",null),(ultimo_id,"electricidad",null),(ultimo_id,"pintura",null),(ultimo_id,"prueba",null);
        -- Agrego el auto a una linea nueva
        INSERT INTO automovil ( modelo, fecha_finalizacion, precio,patente,linea_de_montaje_id_linea,estado,fecha_inicio)
        VALUES (p_modelo, '2013-11-24 17:15:10', 0,patente_generada,ultimo_id,0, NOW() );
        SET ultimo_id_automovil = LAST_INSERT_ID();
        INSERT INTO pedido_has_automovil (pedido_id_pedido,automobil_id_automovil)
        VALUES ( p_id_pedido, ultimo_id_automovil);
         end if;
 set contador =  contador + 1;
        end while;
return CONCAT('Se crearon ', p_cantidad ," autos");
END//

create procedure proceso_auto(
p_patente varchar(45)

)

BEGIN
DECLARE id_encontrado INT;
DECLARE ocupado INT;
DECLARE id_linea_de_montaje int ;
declare primero int ;

-- copio el id de la linea de montaje donde la patente sea la enviada
Select linea_de_montaje_id_linea into id_linea_de_montaje FROM automovil WHERE patente = p_patente;
-- copio el id de el automovil donde la patente sea la enviada
SELECT id_automobil INTO id_encontrado FROM automovil WHERE patente = p_patente;
-- copio el id_estacion mas pequeño de la linea de montaje donde ya saque el id
select min(id_estacion) into primero from estacion_de_trabajo where linea_de_montaje_id_linea = id_linea_de_montaje;
-- copio el id de el automovil que hay en la estacion de trabajo para ver si ya esta en uuso
SELECT id_automovil INTO ocupado from estacion_de_trabajo where id_estacion=primero;
-- si da null significa que esta vacia asi que empieza

if ocupado is null then

-- asigna el automovil a la estacion de trabajo  y cambia el estado del automovil
UPDATE estacion_de_trabajo
SET id_automovil = id_encontrado
WHERE id_estacion = primero;


update automovil
-- estado 0 significa en espera estado 1 significa empezado y 2 finalizado

SET estado = 1 ,fecha_inicio = NOW()
WHERE patente = p_patente;
SELECT 'se comenzo el trabajo' AS mensaje;

-- sino devuelve un error
else
  SELECT 'La estacion de trabajo esta en uso' AS mensaje;
  end if;
END//

create procedure continuar_proceso_auto(
p_patente varchar(45)

)

BEGIN
-- declaro las variables que voy a usar
DECLARE id_automovil_encontrado INT;
DECLARE id_estacion_De_trabajo_Encontrado INT;
declare id_estacion_De_trabajo_mas_uno int;
DECLARE descripcion_aux VARCHAR(45);
DECLARE PatenteOcupado VARCHAR(45);
DECLARE ocupado INT;


-- busco el id del automovil con la patente enviada
Select id_automobil into id_automovil_encontrado FROM automovil WHERE patente = p_patente;
-- busco el id del la estacion de trabajo deonde esta ese automovil
select id_estacion into id_estacion_De_trabajo_Encontrado from  estacion_de_trabajo where id_automovil_encontrado = id_automovil;
-- busco el id del la estacion de trabajo siguiente
select id_estacion into id_estacion_De_trabajo_mas_uno from  estacion_de_trabajo where id_estacion = id_estacion_De_trabajo_Encontrado +1;
-- busco la descripcion de la estacion de trabajo sigueinte para saber si es la ultima
SELECT descripcion INTO descripcion_aux FROM estacion_de_trabajo WHERE id_estacion = id_estacion_De_trabajo_mas_uno;
IF LOWER(descripcion_aux ) = LOWER('ensamblado de chapa') OR descripcion_aux IS NULL THEN
-- si el  auto esta en la ultima estacionj lo termina
UPDATE estacion_de_trabajo
SET id_automovil = null
WHERE id_estacion = id_estacion_De_trabajo_Encontrado;

update automovil
-- estado 0 significa en espera estado 1 significa empezado y 2 finalizado
SET estado = 2 ,fecha_finalizacion = NOW()
WHERE patente = p_patente;

SELECT 'automovil terminado' AS mensaje;

ELSE
-- sino me fijo si la siguiente esta ocupada

SELECT id_automovil INTO ocupado from estacion_de_trabajo where id_estacion=id_estacion_De_trabajo_mas_uno;

if ocupado is null then
-- si no esta ocupada paso el automovil a la estacion siguiente
UPDATE estacion_de_trabajo
SET id_automovil = null
WHERE id_estacion = id_estacion_De_trabajo_Encontrado;
UPDATE estacion_de_trabajo
SET id_automovil = id_automovil_encontrado
WHERE id_estacion = id_estacion_De_trabajo_mas_uno;
else 
-- si  esta ocupada aviso
select patente into PatenteOcupado from automovil where automovil_id = ocupado;

SELECT CONCAT('La estacion de trabajo esta en uso pro el automovil con patente', PatenteOcupado)AS mensaje;
end if;

end if;


END//

CREATE PROCEDURE obtener_estado_vehiculos(

IN p_id_pedido INT

)
BEGIN
    SELECT 
        a.id_automobil AS id_vehiculo,
        -- esto es un switch
        CASE 
            WHEN a.estado = 2 THEN 'Finalizado'
            WHEN a.estado = 1 THEN CONCAT("En Estacion:", et.descripcion) 
            ELSE 'En Espera'
        END AS estado
    FROM 
        automovil a
    LEFT JOIN 
        estacion_de_trabajo et ON a.id_automobil = et.id_automovil
    WHERE 
        a.id_automobil IN (SELECT automobil_id_automovil FROM pedido_has_automovil WHERE pedido_id_pedido = p_id_pedido);
END //

CREATE PROCEDURE obtener_tiempo_medio(

IN p_id_linea_de_montaje INT

)
BEGIN
 -- el select pide con el avg la media de la diferencia de tiempo (TIMESTAMPDIFF) entre las 2 fechas en minutos
SELECT AVG(TIMESTAMPDIFF(minute, fecha_inicio, fecha_finalizacion)) AS tiempo_promedio_construccion
FROM automovil
WHERE estado = 2 AND linea_de_montaje_id_linea = p_id_linea_de_montaje;

END //

DELIMITER ;
/* SET SQL_SAFE_UPDATES = 0;    esto usalo si no funciona los procesos para empazar el auto */
SET SQL_SAFE_UPDATES = 0;
